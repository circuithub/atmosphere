{
  "name": "angular-ui-router",
  "version": "0.2.0",
  "main": "./release/angular-ui-router.min.js",
  "dependencies": {
    "angular": ">= 1.0.6"
  },
  "gitHead": "818b0d69d2063064ca6d2e3b05252200439862d3",
  "readme": "[![Build Status](https://travis-ci.org/angular-ui/ui-router.png?branch=master)](https://travis-ci.org/angular-ui/ui-router)\n\n# UI-Router\n\n####Finally a de-facto solution to nested views and routing.\n* Last release 0.2.0: [Compressed](http://angular-ui.github.io/ui-router/release/angular-ui-router.min.js) / [Uncompressed](http://angular-ui.github.io/ui-router/release/angular-ui-router.js)\n\n\n**Warning:** UI-Router is in active development. The API is highly subject to change. It is not recommended to use this library on projects that require guaranteed stability. \n\n## Main Goal\nTo evolve the concept of an [angularjs](http://angularjs.org/) [***route***](http://docs.angularjs.org/api/ng.$routeProvider) into a more general concept of a ***state*** for managing complex application UI states.\n\n## Main Features\n1. **Robust State Management**\n>`$state` and `$stateProvider`\n\n2. **More Powerful Views**\n>`ui-view` directive (used in place of `ng-view`)\n\n3. **Nested Views**\n>load templates that contain nested `ui-view`s as deep as you'd like.\n\n4. **Routing**\n>States can map to URLs (though it's not required)\n\n5. **Named Views**\n>`<div ui-view=\"chart\">`\n\n6. **Multiple Parallel Views**\n>\n```\n<div ui-view=\"chart1\">\n<div ui-view=\"chart2\">\n```\n\n\n*Basically, do whatever you want with states and routes.*\n\n\n## Resources\n\n* [In-Depth Overview](https://github.com/angular-ui/ui-router/wiki)\n* [API Quick Reference](https://github.com/angular-ui/ui-router/wiki/Quick-Reference)\n* [Sample App](http://angular-ui.github.com/ui-router/sample/) ([Source](https://github.com/angular-ui/ui-router/tree/master/sample))\n* [FAQ](https://github.com/angular-ui/ui-router/wiki/Frequently-Asked-Questions)\n\n## Quick Start\n\n### Setup\n\n1. Get ui-router:\n>* with bower: `bower install angular-ui-router`\n>* fork this repo\n>* download the latest release ([compressed](http://angular-ui.github.io/ui-router/release/angular-ui-router.min.js) | [uncompressed](http://angular-ui.github.io/ui-router/release/angular-ui-router.js))\n\n1. Add angular-ui-router.min.js to your index.html\n> \n```html\n<!doctype html>\n<html ng-app=\"myapp\">\n<head>\n      <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js\"></script>\n      <script src=\"angular-ui-router.min.js\"></script> <!-- Insert after main angular.js file -->\n```\n\n2. Set `ui.router` as a dependency in your module. Note: Use `ui.state` if using v0.0.1.\n>\n```javascript\nvar myapp = angular.module('myapp', ['ui.router'])\n```\n\n### Nested States & Views\n\nThe great majority of ui-router's power is its ability to nest states & views.\n\n1. Follow [Setup](https://github.com/angular-ui/ui-router#setup) instructions above.\n\n2. Add a `ui-view` to your app.\n>\n```html\n<!-- index.html -->\n<body>\n    <div ui-view></div>\n    <!-- Also a way to navigate -->\n    <a href=\"#/route1\">Route 1</a>\n    <a href=\"#/route2\">Route 2</a>\n</body>\n```\n\n3. Add some templates. These will plug into the `ui-view` within index.html. Notice that they have their own `ui-view` as well! That is the key to nesting states and views.\n>\n```html\n<!-- route1.html -->\n<h1>Route 1</h1>\n<hr/>\n<a href=\"#/route1/list\">Show List</a>\n<div ui-view></div>\n```\n```html\n<!-- route2.html -->\n<h1>Route 2</h1>\n<hr/>\n<a href=\"#/route2/list\">Show List</a>\n<div ui-view></div>\n```\n\n4. Add some child templates. *These* will get plugged into the `ui-view` of their parent state templates.\n```html\n<!-- route1.list.html -->\n<h3>List of Route 1 Items</h3>\n<ul>\n  <li ng-repeat=\"item in items\">{{item}}</li>\n</ul>\n```\n```html\n<!-- route2.list.html -->\n<h3>List of Route 2 Things</h3>\n<ul>\n  <li ng-repeat=\"thing in things\">{{thing}}</li>\n</ul>\n```\n\n5. Now let's wire it all up. Set up your states in the module config:\n>\n```javascript\nmyapp.config(function($stateProvider, $urlRouterProvider){\n      //\n      // For any unmatched url, send to /route1\n      $urlRouterProvider.otherwise(\"/route1\") \n      //\n      // Now set up the states\n      $stateProvider\n        .state('route1', {\n            url: \"/route1\",\n            templateUrl: \"route1.html\"\n        })\n          .state('route1.list', {\n              url: \"/list\",\n              templateUrl: \"route1.list.html\",\n              controller: function($scope){\n                $scope.items = [\"A\", \"List\", \"Of\", \"Items\"];\n              }\n          })          \n        .state('route2', {\n            url: \"/route2\",\n            templateUrl: \"route2.html\"\n        })\n          .state('route2.list', {\n              url: \"/list\",\n              templateUrl: \"route2.list.html\",\n              controller: function($scope){\n                $scope.things = [\"A\", \"Set\", \"Of\", \"Things\"];\n              }\n          })\n    })\n```\n\n4. See this quick start example in action. \n>**[Go to Quick Start Plunker for Nested States & Views](http://plnkr.co/edit/u18KQc?p=preview)**\n\n5. This only scratches the surface! You've only seen Nested Views. \n>**[Dive Deeper!](https://github.com/angular-ui/ui-router/wiki)**\n\n\n### Multiple & Named Views\n\nAnother handy feature is the ability to have more than one view per template. Please note: 95% of the time Nested States & Views is the pattern you'll be looking for, opposed to using multiple views per template.\n\n1. Follow [Setup](https://github.com/angular-ui/ui-router#setup) instructions above.\n\n2. Add one or more `ui-view` to your app, give them names.\n>\n```html\n<!-- index.html -->\n<body>\n    <div ui-view=\"viewA\"></div>\n    <div ui-view=\"viewB\"></div>\n    <!-- Also a way to navigate -->\n    <a href=\"#/route1\">Route 1</a>\n    <a href=\"#/route2\">Route 2</a>\n</body>\n```\n\n3. Set up your states in the module config:\n>\n```javascript\nmyapp.config(function($stateProvider){\n  $stateProvider\n\t\t.state('index', {\n\t\t\turl: \"\", // root route\n\t\t\tviews: {\n\t\t\t\t\"viewA\": {\n\t\t\t\t\ttemplateUrl: \"index.viewA.html\"\n\t\t\t\t},\n\t\t\t\t\"viewB\": {\n\t\t\t\t\ttemplateUrl: \"index.viewB.html\"\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t.state('route1', {\n\t\t\turl: \"/route1\",\n\t\t\tviews: {\n\t\t\t\t\"viewA\": {\n\t\t\t\t\ttemplateUrl: \"route1.viewA.html\"\n\t\t\t\t},\n\t\t\t\t\"viewB\": {\n\t\t\t\t\ttemplateUrl: \"route1.viewB.html\"\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t.state('route2', {\n\t\t\turl: \"/route2\",\n\t\t\tviews: {\n\t\t\t\t\"viewA\": {\n\t\t\t\t\ttemplateUrl: \"route2.viewA.html\"\n\t\t\t\t},\n\t\t\t\t\"viewB\": {\n\t\t\t\t\ttemplateUrl: \"route2.viewB.html\"\n\t\t\t\t}\n\t\t\t}\n\t\t})\n})\n```\n\n4. See this quick start example in action. \n>**[Go to Quick Start Plunker for Multiple & Named Views](http://plnkr.co/edit/vDURUN?p=preview)**\n\n5. This only scratches the surface! You've only seen Named Views and Parallel Views. \n>**[Dive Deeper!](https://github.com/angular-ui/ui-router/wiki)**\n\n## Developing\n\nUI-Router uses <code>grunt >= 0.4.x</code> make sure to upgrade your environment and read the\n[Migration Guide](http://gruntjs.com/upgrading-from-0.3-to-0.4).\n\nDependencies for building from source and running tests:\n\n* [grunt-cli](https://github.com/gruntjs/grunt-cli) - run: `$ npm install -g grunt-cli`\n* Then install development dependencies with: `$ npm install`\n\nThere is a number of targets in the gruntfile that is used to building the solution, documents etc.\n\n* `grunt`: Perform a normal build, runs jshint and karma tests\n* `grunt build`: Perform a normal build\n* `grunt dist`: Perform a clean build and generate documentation\n* `grunt dev`: Run dev server (sample app) and watch for changes, builds and runs karma tests on changes.\n\n",
  "readmeFilename": "README.md",
  "_id": "angular-ui-router@0.2.0",
  "description": "[![Build Status](https://travis-ci.org/angular-ui/ui-router.png?branch=master)](https://travis-ci.org/angular-ui/ui-router)",
  "repository": {
    "type": "git",
    "url": "git://github.com/angular-ui/ui-router"
  }
}