// Generated by CoffeeScript 1.6.3
(function() {
  var GitHubStrategy, Toaster, app, coffee, compile, dirUp, express, github, http, nconf, objects, passport, routes, server, sky, urlParse, _s;

  coffee = require("coffee-script");

  Toaster = require("coffee-toaster").Toaster;

  express = require("express");

  http = require("http");

  nconf = require("nconf");

  objects = require("objects");

  urlParse = require("url").parse;

  _s = require("underscore.string");

  app = express();

  nconf.argv().env().file({
    file: __dirname + "/../configs/" + app.settings.env + ".config.json"
  }).defaults({
    "PORT": 3000
  });

  new Toaster("" + __dirname + "/../client", {
    w: true,
    d: true,
    config: {
      exclude: [".DS_Store"],
      vendors: ["client/vendors/angularfire.min.js", "client/vendors/moment.js"],
      minify: false,
      release: "../server/public/javascripts/app.js",
      debug: "../server/public/javascripts/app-debug.js"
    }
  });

  routes = require("./routes");

  sky = require("./services/sky");

  passport = require("passport");

  GitHubStrategy = require("passport-github").Strategy;

  passport.serializeUser(function(user, done) {
    return done(null, user);
  });

  passport.deserializeUser(function(obj, done) {
    return done(null, obj);
  });

  github = require("octonode");

  console.log(nconf.get("GITHUB_CLIENT_ID"));

  console.log(nconf.get("GITHUB_CLIENT_KEY"));

  console.log(nconf.get("GITHUB_CALLBACK_URL"));

  passport.use(new GitHubStrategy({
    clientID: nconf.get("GITHUB_CLIENT_ID"),
    clientSecret: nconf.get("GITHUB_CLIENT_KEY"),
    callbackURL: nconf.get("GITHUB_CALLBACK_URL")
  }, function(accessToken, refreshToken, profile, done) {
    return process.nextTick(function() {
      var circuithubOrg, octonode;
      octonode = new github.client(accessToken);
      circuithubOrg = octonode.org("circuithub");
      return circuithubOrg.members(function(err, members) {
        var orgMember;
        if (err != null) {
          done(null, null);
        }
        orgMember = objects.find(members, "login", profile.username);
        if (orgMember != null) {
          return done(null, profile);
        } else {
          return done(null, null);
        }
      });
    });
  }));

  dirUp = function(path) {
    return _s.strLeftBack(path, "/");
  };

  app.use(express.logger());

  app.use(express.cookieParser());

  app.set('views', dirUp(__dirname) + "/client/app");

  app.set('view engine', 'jade');

  app.set("view options", {
    layout: false
  });

  compile = function(str, path) {
    console.log("\n\n\n=-=-=[stylus-compile]", str, path, "\n\n\n");
    return stylus(str);
  };

  app.use(require("stylus").middleware({
    serve: true,
    force: true,
    debug: true,
    src: dirUp(__dirname) + "/client/app/stylesheets",
    dest: __dirname + "/public/stylesheets",
    compile: compile
  }));

  console.log("\n\n\n=-=-=[hi]", dirUp(__dirname) + "/client/app/stylesheets", "\n\n\n");

  console.log("\n\n\n=-=-=[world]", __dirname + "/public/stylesheets");

  app.use(express.bodyParser());

  app.use(express.session({
    secret: "the super secret blahmooquack",
    key: "spark.sid"
  }));

  app.use(passport.initialize());

  app.use(passport.session());

  app.use(app.router);

  app.use(express["static"](__dirname + "/public"));

  app.configure("development", function() {
    return app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
  });

  app.configure("production", function() {
    return app.use(express.errorHandler());
  });

  routes.loadRoutes(app, passport);

  server = http.createServer(app);

  server.listen(nconf.get("PORT"), function() {
    return console.log("\n\n-=< Express server listening on port " + (server.address().port) + " in " + app.settings.env + " mode >=-\n\n");
  });

}).call(this);
